name: Go Build and Release

on:
  push:
    tags:
      - 'v*'
#  allow manually running workflow
  workflow_dispatch:

permissions:
    contents: write
    actions: read
    packages: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with: 
          node-version: '20'

      - name: Check out code
        uses: actions/checkout@v3

      - name: NPM
        run: npm install

      - name: Build Vite
        run: npm run build:vite

      - name: Build binary for Linux
        run: npm run build:linux

      # - name: Build binary for Windows
      #   run: npm run build:win

      - name: Build binary for macOS
        run: npm run build:mac

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # - name: Upload Linux Binary
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./release/${{ github.ref_name }}/
      #     asset_name: subnet-server-linux-amd64
      #     asset_content_type: application/octet-stream

      # - name: Upload Windows Binary
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./subnet-server-amd64.exe
      #     asset_name: subnet-server-amd64.exe
      #     asset_content_type: application/octet-stream

      - name: Upload macOS Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/${{ github.ref_name }}/subnetViewer-Mac-${{ github.ref_name }}-Installer.dmg
          asset_name: subnet-server-amd64
          asset_content_type: application/octet-stream
